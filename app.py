# ==============================================================================
# BLOCO 1: IMPORTA√á√ïES
# ==============================================================================
import os
import io
import json
import requests
import textwrap
import numpy as np
from flask import Flask, request, jsonify
from bs4 import BeautifulSoup
from dotenv import load_dotenv
import google.generativeai as genai
from PIL import Image, ImageDraw, ImageFont
import imageio # A estrela da nossa nova solu√ß√£o

# ==============================================================================
# BLOCO 2: CONFIGURA√á√ÉO INICIAL
# ==============================================================================
load_dotenv()
app = Flask(__name__)

try:
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
except Exception as e:
    print(f"‚ùå ERRO GRAVE: N√£o foi poss√≠vel configurar a API do Gemini. Verifique sua chave no arquivo .env. Erro: {e}")

# Constantes para o v√≠deo
REELS_WIDTH = 1080
REELS_HEIGHT = 1920
VIDEO_DURATION = 8
FPS = 24 # Frames por segundo

# ==============================================================================
# BLOCO 3: FUN√á√ïES AUXILIARES
# ==============================================================================
def gerar_conteudo_com_ia(texto_noticia):
    print("ü§ñ Conectando com a IA para gerar conte√∫do...")
    try:
        model = genai.GenerativeModel('gemini-1.5-pro-latest')
        prompt = f"""
        Aja como um editor de social media para um portal de not√≠cias brasileiro.
        Baseado na not√≠cia abaixo, gere o seguinte conte√∫do para um Reels do Instagram no formato JSON:
        1.  "titulo_video": Um t√≠tulo muito curto e impactante para aparecer no v√≠deo (m√°ximo 10 palavras).
        2.  "legenda": Uma legenda para o post, resumindo a not√≠cia em 2-3 frases e terminando com "Leia a mat√©ria completa no link da bio.".
        3.  "hashtags": Uma string √∫nica contendo de 5 a 7 hashtags relevantes separadas por espa√ßo (ex: "#noticia #brasil #politica").

        Not√≠cia:
        {texto_noticia[:4000]}
        """
        response = model.generate_content(prompt)
        json_response_text = response.text.replace("```json", "").replace("```", "").strip()
        conteudo_gerado = json.loads(json_response_text)
        print("‚úÖ Conte√∫do gerado pela IA com sucesso!")
        return conteudo_gerado
    except Exception as e:
        print(f"‚ùå Erro na IA: {e}")
        return None

def criar_video_com_pillow(url_imagem, titulo_video, nome_arquivo_saida="reels_gerado.mp4"):
    print(f"üé¨ Come√ßando a cria√ß√£o do v√≠deo com o novo m√©todo (Pillow + Imageio)...")
    try:
        # 1. Baixar a imagem da not√≠cia
        response_img = requests.get(url_imagem, stream=True)
        response_img.raise_for_status()
        img_bytes = io.BytesIO(response_img.content)
        imagem_noticia = Image.open(img_bytes).convert("RGBA")

        # 2. Criar o fundo preto do Reels
        fundo = Image.new('RGBA', (REELS_WIDTH, REELS_HEIGHT), (0, 0, 0, 255))

        # 3. Redimensionar e colar a imagem da not√≠cia no fundo
        imagem_noticia.thumbnail((REELS_WIDTH * 0.9, REELS_HEIGHT * 0.9)) # Redimensiona mantendo propor√ß√£o
        pos_x = (REELS_WIDTH - imagem_noticia.width) // 2
        pos_y = (REELS_HEIGHT - imagem_noticia.height) // 2
        fundo.paste(imagem_noticia, (pos_x, pos_y), imagem_noticia)

        # 4. Adicionar o texto sobre a imagem
        draw = ImageDraw.Draw(fundo)
        try:
            # Tenta usar uma fonte comum. Se n√£o encontrar, usa a padr√£o.
            fonte = ImageFont.truetype("arialbd.ttf", 90)
        except IOError:
            print("‚ö†Ô∏è Fonte Arial Bold n√£o encontrada, usando fonte padr√£o.")
            fonte = ImageFont.load_default()

        # Quebra o texto em v√°rias linhas se for muito longo
        linhas_texto = textwrap.wrap(titulo_video.upper(), width=20)
        texto_junto = "\n".join(linhas_texto)
        
        # Desenha o texto com sombra
        x, y = REELS_WIDTH / 2, REELS_HEIGHT * 0.8
        # Sombra preta
        draw.text((x+5, y+5), texto_junto, font=fonte, fill=(0,0,0,255), anchor="ms", align="center")
        # Texto branco
        draw.text((x, y), texto_junto, font=fonte, fill=(255,255,255,255), anchor="ms", align="center")

        # 5. Criar o v√≠deo a partir da imagem final
        # Converte a imagem final do Pillow para um formato que o imageio entende (numpy array)
        frame_final = np.array(fundo)
        
        # Cria uma lista de frames id√™nticos para compor o v√≠deo
        frames = [frame_final for _ in range(FPS * VIDEO_DURATION)]

        # Salva a sequ√™ncia de frames como um v√≠deo MP4
        imageio.mimsave(nome_arquivo_saida, frames, fps=FPS, codec='libx264')

        print(f"‚úÖ V√≠deo '{nome_arquivo_saida}' salvo com sucesso com o novo m√©todo!")
        return nome_arquivo_saida
    except Exception as e:
        print(f"‚ùå Erro ao criar v√≠deo com Pillow/Imageio: {e}")
        return None

# ==============================================================================
# BLOCO 4: O MAESTRO (RECEPTOR DO WEBHOOK)
# ==============================================================================
@app.route('/webhook-receiver', methods=['POST'])
def webhook_receiver():
    # ... (O C√ìDIGO DESTE BLOCO CONTINUA EXATAMENTE O MESMO) ...
    print("\n\nüîî Webhook recebido do WordPress!")
    dados_wp = request.json
    try:
        url_noticia = dados_wp.get('post', {}).get('permalink')
        titulo_noticia = dados_wp.get('post', {}).get('post_title')
        url_imagem_destaque = dados_wp.get('post_meta', {}).get('thumbnail') 
        
        if not all([url_noticia, titulo_noticia, url_imagem_destaque]):
            print("‚ùå Erro: Dados essenciais faltando no webhook.")
            return jsonify({"status": "erro", "mensagem": "Payload do webhook inv√°lido."}), 400
    except Exception as e:
        print(f"‚ùå Erro ao processar dados do webhook: {e}")
        return jsonify({"status": "erro", "mensagem": "Payload do webhook com formato inesperado."}), 400

    print(f"üì∞ Not√≠cia recebida: {titulo_noticia}")
    print(f"üñºÔ∏è Imagem: {url_imagem_destaque}")

    try:
        print(f"üíª Lendo o conte√∫do de: {url_noticia}")
        response_page = requests.get(url_noticia)
        soup = BeautifulSoup(response_page.content, 'html.parser')
        corpo_artigo = soup.find('div', class_='entry-content') 
        texto_noticia = corpo_artigo.get_text(separator='\n', strip=True)
        print("‚úÖ Texto da not√≠cia extra√≠do com sucesso.")
    except Exception as e:
        print(f"‚ùå Erro ao ler a p√°gina da not√≠cia: {e}")
        return jsonify({"status": "erro", "mensagem": "N√£o foi poss√≠vel ler a URL."}), 400

    conteudo_ia = gerar_conteudo_com_ia(texto_noticia)
    if not conteudo_ia:
        return jsonify({"status": "erro", "mensagem": "Falha na IA."}), 500
    
    # AQUI CHAMAMOS A NOSSA NOVA FUN√á√ÉO DE CRIAR V√çDEO
    caminho_video_final = criar_video_com_pillow(url_imagem_destaque, conteudo_ia['titulo_video'])
    if not caminho_video_final:
        return jsonify({"status": "erro", "mensagem": "Falha na cria√ß√£o do v√≠deo."}), 500

    legenda_final = f"{conteudo_ia['legenda']}\n.\n.\n.\n{conteudo_ia['hashtags']}"
    print("üì§ Simulando publica√ß√£o do Reel...")
    print(f"   -> V√≠deo a ser publicado: {caminho_video_final}")
    print(f"   -> Legenda do post: {legenda_final}")
    print("‚úÖ Automa√ß√£o conclu√≠da com sucesso para esta not√≠cia!")
    return jsonify({"status": "sucesso"}), 200

# ==============================================================================
# BLOCO 5: INICIALIZA√á√ÉO
# ==============================================================================
if __name__ == '__main__':
    print("‚úÖ Automa√ß√£o iniciada com o m√©todo alternativo!")
    app.run(host='0.0.0.0', port=5001, debug=True)